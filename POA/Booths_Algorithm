
def right_shift(ans, q, qi):
    combined = ans + q + [qi]
    combined = [combined[0]] + combined[:-1]

    ans = combined[:len(ans)]
    q = combined[len(ans): len(ans) + len(q)]
    qi = combined[-1]
    return ans, q, qi
# print(right_shift([1,0,0,0], [1, 0, 0, 0], 1))

def add(a, b, carry = 0):
    ans = [0] * len(a)
    i = len(a) - 1
    while i >= 0:
        # print(i, ': c', carry,'a', a[i], 'b', b[i])
        bit = carry + a[i] + b[i]
        
        if bit == 0:
            carry, ans[i] = 0, 0
        elif bit == 1:
            carry, ans[i] = 0, 1
        elif bit == 2:
            carry, ans[i] = 1, 0
        elif bit == 3:
            carry, ans[i] = 1, 1
        
        i -= 1
    return ans
# print(add([1,1,1,0], [1, 1, 0, 1]))

def complement(a):
    c = []
    for dig in a:
        if dig == 0:
            c.append(1)
        else:
            c.append(0)
    return c
# print(complement([1,0,1,0,0]))

def booths_algo(m, q):
    sc = len(m)
    qi = 0
    ac = [0] * sc
    m_2comp = add(complement(m), ac, 1)

    while sc > 0:
        if q[-1] == 0 and qi == 1:
            ac = add(ac, m)

        elif q[-1] == 1 and qi == 0:
            ac = add(ac, m_2comp)

        sc -= 1
        ac, q, qi = right_shift(ac, q, qi) 

    return ac + q


# bool1, bool2 = [1, 0, 0, 1], [0, 0, 1, 1]

bool1 = list(map(lambda x: int(x), list(input("Multiplicand: "))))
bool2 = list(map(lambda x: int(x), list(input("Multiplier: "))))
mul = booths_algo(bool1, bool2)
print(mul)

