
def right_shift(ac, q, qi):
    q_last = q[-1]
    qi = q_last
    q = q[:-1]

    repeated = [ac[0]]
    ac = repeated + ac

    ac_last = ac[-1]
    q = [ac_last] + q
    ac = ac[:-1]

    return ac, q, qi
# print(right_shift([1,0,0,0], [1, 0, 0, 0], 1))

def add(a, b, carry = 0):
    ans = [0] * len(a)
    i = len(a) - 1
    while i >= 0:
        # print(i, ': c', carry,'a', a[i], 'b', b[i])
        bit = carry + a[i] + b[i]
        
        if bit == 0:
            carry, ans[i] = 0, 0
        elif bit == 1:
            carry, ans[i] = 0, 1
        elif bit == 2:
            carry, ans[i] = 1, 0
        elif bit == 3:
            carry, ans[i] = 1, 1
        
        i -= 1
    return ans
# print(add([1,1,1,0], [1, 1, 0, 1]))

def complement(a):
    c = []
    for dig in a:
        if dig == 0:
            c.append(1)
        else:
            c.append(0)
    return c
# print(complement([1,0,1,0,0]))

def booths_algo(m, q):
    sc = len(m)
    qi = 0
    ac = [0] * sc
    m_2comp = add(complement(m), ac, 1)

    while sc > 0:
        if q[-1] == 0 and qi == 1:
            ac = add(ac, m)

        elif q[-1] == 1 and qi == 0:
            ac = add(ac, m_2comp)

        sc -= 1
        ac, q, qi = right_shift(ac, q, qi) 
    return ac + q

def binaryToDecimal(binary) -> int:
    if binary[0] == 1:
        neg = True
    else:
        neg = False

    binary = binary[1:]
    decimal = 0
    for dig in range(len(binary)):
        print(binary[dig] * 2**(len(binary)-1-dig))
        decimal += binary[dig] * 2**(len(binary)-1-dig)
    
    return decimal

print(binaryToDecimal([1, 0, 0, 0]))

def decimalToBinary(num: int):
    neg = False
    if num < 0:
        neg = True
        num = -num

    binary = []
    rem = 0

    while num != 0:
        rem = num % 2
        num = num // 2
        binary = [rem] + binary

    if neg:
        return [1] + add(complement(binary), [0] * len(binary), 1)
    
    return [0] + binary

print(decimalToBinary(7))

# bool1, bool2 = [1, 0, 0, 1], [0, 0, 1, 1]

# bool1 = list(map(lambda x: int(x), list(input("Multiplicand: "))))
# bool2 = list(map(lambda x: int(x), list(input("Multiplier: "))))


# num1 = int(input("Multiplicand: "))
# num2 = int(input("Multiplier: "))

# bool1 = decimalToBinary(num1)
# bool2 = decimalToBinary(num2)

# print("Boolean 1: ", bool1)
# print("Boolean 2: ", bool2)

# mul = booths_algo(bool1, bool2)

# print("Result:")
# print("Boolean: ", "".join(mul))
# print("Integer: ", binaryToDecimal(mul))

